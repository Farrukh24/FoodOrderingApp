// <auto-generated />
using System;
using Entities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210927050030_AddData")]
    partial class AddData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fast Foods"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Restaurants"
                        });
                });

            modelBuilder.Entity("Entities.Models.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Entities.Models.Entities.FoodPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandPictureUrlPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("FoodNationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodPictureUrlPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmallDescription")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("FoodPlaces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandPictureUrlPath = "https://i.pinimg.com/564x/08/49/bc/0849bc1b9e2ac21acb66ceb9fff27bcd.jpg",
                            CategoryId = 1,
                            FoodNationality = "American",
                            FoodPictureUrlPath = "https://i.pinimg.com/564x/84/9a/2d/849a2d6561194b8c9675371cac8bac4e.jpg",
                            Name = "KFC",
                            SmallDescription = "Fast Food"
                        },
                        new
                        {
                            Id = 2,
                            BrandPictureUrlPath = "https://media-cdn.tripadvisor.com/media/photo-p/1c/bf/3b/28/caption.jpg",
                            CategoryId = 1,
                            FoodNationality = "American",
                            FoodPictureUrlPath = "https://www.afisha.uz/ui/materials/2020/04/0577662_b.jpeg",
                            Name = "Max Way",
                            SmallDescription = "Fast Food"
                        },
                        new
                        {
                            Id = 3,
                            BrandPictureUrlPath = "https://www.afisha.uz/ui/catalog/2018/01/0375347.jpeg",
                            CategoryId = 2,
                            FoodNationality = "Italian",
                            FoodPictureUrlPath = "https://media-cdn.tripadvisor.com/media/photo-s/1c/ec/43/86/caption.jpg",
                            Name = "Pasternak",
                            SmallDescription = "Restaurant"
                        },
                        new
                        {
                            Id = 4,
                            BrandPictureUrlPath = "https://resto.uz/data/resto/43/4280/yapona-mama-2922.jpg",
                            CategoryId = 2,
                            FoodNationality = "Japanese",
                            FoodPictureUrlPath = "https://fastly.4sqi.net/img/general/200x200/18754087_77qAsyd3iMp8lH2W_Plb4gBwnNCIeslk9k3dmvM93co.jpg",
                            Name = "Yapona Mama",
                            SmallDescription = "Restaurant"
                        });
                });

            modelBuilder.Entity("Entities.Models.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("FoodPlaceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FoodPlaceId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Chiken, tomato, salads, souse",
                            FoodPlaceId = 1,
                            Name = "ChiefBurger",
                            Price = 7.99m
                        },
                        new
                        {
                            Id = 2,
                            Description = "bitter chiken, cheese, souse, salad",
                            FoodPlaceId = 1,
                            Name = "Twister",
                            Price = 8.99m
                        },
                        new
                        {
                            Id = 3,
                            Description = "CheeseBurgur, Frees, Coca Cola, souse, stripes",
                            FoodPlaceId = 1,
                            Name = "LunchBox",
                            Price = 10.99m
                        },
                        new
                        {
                            Id = 4,
                            Description = "5 stripes, feet of chiken, 10 rings, frees and more",
                            FoodPlaceId = 1,
                            Name = "FriendsBox",
                            Price = 17.99m
                        },
                        new
                        {
                            Id = 5,
                            Description = "club sandvich chiken, frees, coca cola",
                            FoodPlaceId = 2,
                            Name = "FirstCombo",
                            Price = 5.99m
                        },
                        new
                        {
                            Id = 6,
                            Description = "Lavash, frees, Coca cola",
                            FoodPlaceId = 2,
                            Name = "SecondCombo",
                            Price = 6.19m
                        },
                        new
                        {
                            Id = 7,
                            Description = "Shaurma, frees, coca cola",
                            FoodPlaceId = 2,
                            Name = "ThirdCombo",
                            Price = 6.09m
                        },
                        new
                        {
                            Id = 8,
                            Description = "burger, frees, coca cola",
                            FoodPlaceId = 2,
                            Name = "FourthCombo",
                            Price = 6.09m
                        },
                        new
                        {
                            Id = 9,
                            Description = "Unagi light, fujiyama, akibuto, malibu, americano, losos",
                            FoodPlaceId = 4,
                            Name = "Seytan Set",
                            Price = 35.99m
                        },
                        new
                        {
                            Id = 10,
                            Description = "chiken, soup, salad, rice",
                            FoodPlaceId = 4,
                            Name = "Asian Chiken",
                            Price = 7.99m
                        },
                        new
                        {
                            Id = 11,
                            Description = "potato, souse, fish",
                            FoodPlaceId = 4,
                            Name = "Fish and Chips",
                            Price = 7.29m
                        },
                        new
                        {
                            Id = 12,
                            Description = "Just Eat..  Fish",
                            FoodPlaceId = 3,
                            Name = "Farel",
                            Price = 60.99m
                        },
                        new
                        {
                            Id = 13,
                            Description = "meat, salads, decoration",
                            FoodPlaceId = 3,
                            Name = "Welington",
                            Price = 57.99m
                        },
                        new
                        {
                            Id = 14,
                            Description = "Pizza special one",
                            FoodPlaceId = 3,
                            Name = "GoodMan",
                            Price = 15.99m
                        });
                });

            modelBuilder.Entity("Entities.Models.Entities.Feedback", b =>
                {
                    b.HasOne("Entities.Models.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Models.Entities.FoodPlace", b =>
                {
                    b.HasOne("Entities.Models.Entities.Category", "Category")
                        .WithMany("Places")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Models.Entities.Product", b =>
                {
                    b.HasOne("Entities.Models.Entities.FoodPlace", "Place")
                        .WithMany("Products")
                        .HasForeignKey("FoodPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Entities.Models.Entities.Category", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("Entities.Models.Entities.FoodPlace", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Models.Entities.Product", b =>
                {
                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
